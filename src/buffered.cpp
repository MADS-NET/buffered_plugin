/*
  ____                                   _             _       
 / ___|  ___  _   _ _ __ ___ ___   _ __ | |_   _  __ _(_)_ __  
 \___ \ / _ \| | | | '__/ __/ _ \ | '_ \| | | | |/ _` | | '_ \ 
  ___) | (_) | |_| | | | (_|  __/ | |_) | | |_| | (_| | | | | |
 |____/ \___/ \__,_|_|  \___\___| | .__/|_|\__,_|\__, |_|_| |_|
                                  |_|            |___/         
# A Template for BufferedPlugin, a Source Plugin
# Generated by the command: plugin -t source -d buffered_plugin buffered
# Hostname: Fram-IV.local
# Current working directory: /Users/p4010/Develop/MADS_plugins
# Creation date: 2025-10-07T09:21:48.630+0200
# NOTICE: MADS Version 1.4.0
*/
// Mandatory included headers
#include <source.hpp>
#include <nlohmann/json.hpp>
#include <pugg/Kernel.h>

// other includes as needed here
#include "acquisitor.hpp"

// Define the name of the plugin
#ifndef PLUGIN_NAME
#define PLUGIN_NAME "buffered"
#endif

// Load the namespaces
using namespace std;
using json = nlohmann::json;


// Plugin class. This shall be the only part that needs to be modified,
// implementing the actual functionality
class BufferedPlugin : public Source<json> {

public:

  // Typically, no need to change this
  string kind() override { return PLUGIN_NAME; }

  // Implement the actual functionality here
  return_type get_output(json &out,
                         std::vector<unsigned char> *blob = nullptr) override {
    out.clear();
    if (!_agent_id.empty()) out["agent_id"] = _agent_id;

    _acq->fill_buffer();
    json e = json::array();
    for (auto &l : _acq->data()) {
      e.push_back(get<0>(l).time_since_epoch().count());
      e.push_back(get<1>(l)[0]);
      e.push_back(get<1>(l)[2]);
      e.push_back(get<1>(l)[3]);
      out["data"].push_back(e);
    }

    return return_type::success;
  }

  void set_params(void const *params) override {
    Source::set_params(params);
    _params["capacity"] = 100;
    _params["mean"] = 10;
    _params["sd"] = 2;
    _params.merge_patch(*(json *)params);

    _acq = make_unique<Acquisitor<>>(_params);
    
  }

  // Implement this method if you want to provide additional information
  map<string, string> info() override { 
    // return a map of strings with additional information about the plugin
    // it is used to print the information about the plugin when it is loaded
    // by the agent
    
    return {
      {"capacity", to_string(_params["capacity"])}
    };
    
  };

private:
  // Define the fields that are used to store internal resources
  unique_ptr<Acquisitor<>> _acq;
};


/*
  ____  _             _             _      _
 |  _ \| |_   _  __ _(_)_ __     __| |_ __(_)_   _____ _ __
 | |_) | | | | |/ _` | | '_ \   / _` | '__| \ \ / / _ \ '__|
 |  __/| | |_| | (_| | | | | | | (_| | |  | |\ V /  __/ |
 |_|   |_|\__,_|\__, |_|_| |_|  \__,_|_|  |_| \_/ \___|_|
                |___/
Enable the class as plugin
*/
INSTALL_SOURCE_DRIVER(BufferedPlugin, json)


/*
                  _
  _ __ ___   __ _(_)_ __
 | '_ ` _ \ / _` | | '_ \
 | | | | | | (_| | | | | |
 |_| |_| |_|\__,_|_|_| |_|

For testing purposes, when directly executing the plugin
*/
int main(int argc, char const *argv[]) {
  BufferedPlugin plugin;
  json output, params;

  // Set example values to params
  params["test"] = "value";

  // Set the parameters
  plugin.set_params(&params);

  // Process data
  plugin.get_output(output);

  // Produce output
  cout << "Output: " << output << endl;

  return 0;
}
